;; custome function definitions.
      ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
	(filename (buffer-file-name)))
    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
	  (message "A buffer named '%s' already exists!" new-name)
	(progn
	  (rename-file name new-name 1)
	  (rename-buffer new-name)
	  (set-visited-file-name new-name)
	  (set-buffer-modified-p nil))))))


(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
      (revert-buffer t t))

(require 'package)
(add-to-list 'package-archives
	          '("marmalade" . "http://marmalade-repo.org/packages/") t)
(require 'package)
(add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
(package-initialize)
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
(package-initialize)

(require 'ediprolog)
    (global-set-key [f10] 'ediprolog-dwim)



;; initialize global modes.
;;(show-paren-mode)

(global-diff-hl-mode)


(autoload 'moz-minor-mode "moz.el" "Mozilla Minor and Inferior Mozilla Modes" t)
(add-hook 'javascript-mode-hook 'javascript-custom-setup)
(defun javascript-custom-setup ()
  (moz-minor-mode 1))
(defun moz-send-string (&optional s)
  (interactive)
  (comint-send-string (inferior-moz-process) (or s (read-string "repl> "))))
(defun moz-page-reload ()
  (interactive)
  (moz-send-string "content.location.reload();"))

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))


(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags
      '((php-mode "<\?php\|<\? \|<\?=" "\?>")
	(js-mode  "<script[^>]*>" "</script>")
	(css-mode "<style[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "html" "twig"))
(multi-web-global-mode 1)



;; set global variables.
(setq make-backup-files nil)
(setq auto-save-file-name nil)
(setq auto-save-default nil)

(define-key global-map [f5] 'toggle-truncate-lines)
;;(keyboard-translate ?\C-f ?\C-l)

;;(keyboard-translate ?\C-l ?\C-f)
;;(keyboard-translate ?\C-b ?\C-j)
;;(keyboard-translate ?\C-j ?\C-b)
;;(keyboard-translate ?\C-p ?\C-i)
;;(keyboard-translate ?\C-i ?\C-p)
;;(keyboard-translate ?\C-n ?\C-k)
;;(keyboard-translate ?\C-k ?\C-n)

;;(keyboard-translate ?\M-f ?\M-l)
;;(keyboard-translate ?\M-l ?\M-f)
;;(keyboard-translate ?\M-b ?\M-j)
;;(keyboard-translate ?\M-j ?\M-b)
;;(keyboard-translate ?\M-p ?\M-i)
;;(keyboard-translate ?\M-i ?\M-p)
;;(keyboard-translate ?\M-n ?\M-k)
;;(keyboard-translate ?\M-k ?\M-n)


(org-babel-do-load-languages
 'org-babel-load-languages
  '((dot . t)))

;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;;(setq inferior-lisp-program "sbcl")

(require 'auto-complete-config)
(setq ac-directory-directories "/home/guff/.emacs.d/elpa/auto-complete-1.4/dict")
(setq-default ac-sources
	      '(ac-source-abbrev ac-source-dictionary  ac-source-words-in-same-mode-buffers))
(ac-config-default)

(add-to-list 'load-path "/home/guff/.emacs.d/elpa/ag.el-master")
(require 'ag)


(require 'projectile)
(projectile-global-mode)
(add-to-list 'load-path "~/.emacs.d/elpa/helm-projectile-0.10.0/")
(require 'helm-config)
(require 'yasnippet)
(yas-global-mode 1)
(setq yas-snippet-dirs
      '("/home/guff/.emacs.d/elpa/yasnippet-0.8.0/snippets"                 ;; personal snippets
	"/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
	"/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
	"/path/to/yasnippet/snippets"         ;; the default collection
	        ))
(require 'sr-speedbar)
(global-set-key (kbd "<f12>") 'sr-speedbar-toggle)
(require 'emmet-mode)
(require 'google-translate)
(require 'google-translate-smooth-ui)
(setq google-translate-default-source-language "English")
(setq google-translate-default-target-language "Russian")
(global-set-key (kbd "C-t") 'google-translate-at-point)
(global-set-key (kbd "C-M-r") 'revert-buffer-no-confirm)
(global-set-key (kbd "C-x G") 'magit-status)
;;(global-set-key (kbd "C-t") 'google-translate-query-translate)


;;(require 'ido)
;;(ido-mode t)
;;(setq ido-enable-flex-matching t)



;;path to load plugins.
(add-to-list 'load-path "/home/guff/.emacs.d/elpa/")

(smart-tabs-insinuate 'javascript 'nxml)

(require 'whitespace)

(require 'linum)
(setq linum-format "%d " )
(global-linum-mode 1) 

;;(defun my/insert-line-before ()
;; (interactive)
;;(save-excursion
;;  (move-beginning-of-line 1)
;;  (newline)))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(google-translate-default-source-language "en")
 '(google-translate-default-target-language "ru"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'upcase-region 'disabled nil)
